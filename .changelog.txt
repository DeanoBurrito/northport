- Updated to use limine v5:
    - Since the bootloader now supports riscv, the boot shim for that platform was removed. It'll be uploaded as a separate project for anyone who wants to use it.
    - With the shim being removed, the device tree parser no longer needs to operate with the 'no allocation' constraint, so it's been rewriten to be efficient and build a tree in memory. Previously it parsed chunks of the device tree for every operation. It operates like smoldtb without the statically allocated buffer.
    - Bootable ISO for riscv64 is now included in the releases tab.
- Documentation improvements:
    - Earlier chapters rewritten to be more consistent.
    - Added VMM chapter.

- Memory management stack improvements:
    - Added per-core caches for slab allocation in the kernel. 
        - Functionally this is similar to magazines as described in 'magazines and vmem' from the BSD team.
        - This greatly reduces contention between cores when allocating memory.
    - VMM: fixed demang paging + SMP bug, general cleanup of vm driver interface.
        - Added 'zero paging': when demang paging a readonly page of all zeroes is mapped instead of nothing. This should help cause a few less page faults, and later on.
        - Added VFS driver: we can now memory map files, including expanding them. Private mappings aren't supported just yet, but there have been provisions made. The VFS VM driver also makes use of demand paging where appropriate.
        - Switched to a red-black tree for managing vm ranges (instead of a singly linked list). Managing free address space is also done with another rbtree instead of inferring which regions were in-use. This is a little easier to reason about at the cost of more runtime memory.

- Added development cache (develcache): limine and any OVMF firmware files for testing are downloaded and cached inside the project directly, reducing setup for getting started with the project.
    - This is opt-out, and you can point the build system to your own limine and OVMF firmware files if you prefer that.

- Kernel/drivers: module loader and external drivers now fully suppoported.
    - Majority of kernel drivers will be loaded as shared objects from the initdisk.
    - Proof of concept driver written. Previously implemented drivers will be ported at some point to use the new system.
- Kernel: rewrite of symbol lookup. Before symbols used to be generated after the kernel was linked, compiling the symbols into an ELF object and sticking that object at the end of the kernel file (so as not to shuffle existing symbol addresses around). This certainly worked, but it's not as clean as the newer version: which just parses the kernel file request from the bootloader.
- Kernel/riscv: now uses `tp` for core-local info instead of reading `sscratch` everytime. Thanks to xvanc and sigterm for the feedback.
- Kernel/riscv: support for acpi based initialization, in addition to the device tree.
- Kernel: added concept of system topology, currently logical and physical cores are tracked, are as NUMA domains and their corresponding physical cores and memory.
- Moved to internal stdint.h/stddef.h headers, meaning no external headers are required for building. This removes the need for management external sysroots and platform-specific headers.
