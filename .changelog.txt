# current
- Rewrite of DriverManager, which now makes full use of loadable modules. Drivers can also attach/detach hardware devices.
    - DriverManager acts as a medium between driver manifests (which describe hardware a driver can use) and device descriptors, which describe how toaccess a device.
    - Drivers now export a number of DeviceAPIs, which act as an interface into a driver from the rest of the system.
    - Added device APIs for the following things: simple framebuffer, filesystem, IO devices.
    - Added concept of the 'driver shadow', which is a thread-local pointer that tracks whether the thread is currently running on behalf of a driver. This allows a particular subsystem to know if it's running because the kernel asked it to, or because because of a driver (and which driver). This pointer is always populated for threads under the driver's control, and is set before calling any device API functions - and cleared after they return.
- Added `np-driverlib` library, which contains utility code for C++ drivers targetting the northport kernel. A large chunk of the supporting code for drivers has been moved here (and out of the kernel).
    - As a result the kernel source tree is slightly smaller.
- Added ability to bake-in compile-time constants to the kernel, like the git commit the build is based on, c++ flags used to build it, as well as the kernel version.
    - Some of this information is shown on the stats display.
- LICENSE file is now copied to initdisk when building.
- Kernel symbol store now stores some type info about each symbol, like it's visibility (for linking purposes to other modules).
    - ELF modules now have their symbols added to the kernel symbol store.

- Added VFS::FindChild() to locate a child node directly by it's name.
    - As a result resolving full filepaths is now done genericly, instead of per-driver.

- Cleaned up some dead code in PciBridge, from before limine had riscv support. Namely allocating BARs (which is now done via UEFI).
- Fixed message string not making it through panic sequence properly.
- Fixed misalignment bug when loading driver metadata causing entrypoint to sometimes be wrong.
- Fixed incorrect calculation of resident set size in AnonVmDriver.
- Fixed accidentally not using PIT for platform-wide timer if HPET is present.
- Fixed bug in pool heap which assumed that new regions of virtual memory were allocated with ascending base addresses.

# v0.2.0
- Updated to use limine v5:
    - Since the bootloader now supports riscv, the boot shim for that platform was removed. It'll be uploaded as a separate project for anyone who wants to use it.
    - With the shim being removed, the device tree parser no longer needs to operate with the 'no allocation' constraint, so it's been rewriten to be efficient and build a tree in memory. Previously it parsed chunks of the device tree for every operation. It operates like smoldtb without the statically allocated buffer.
    - Bootable ISO for riscv64 is now included in the releases tab.
- Documentation improvements:
    - Earlier chapters rewritten to be more consistent.
    - Added VMM chapter.

- Memory management stack improvements:
    - Added per-core caches for slab allocation in the kernel. 
        - Functionally this is similar to magazines as described in 'magazines and vmem' from the BSD team.
        - This greatly reduces contention between cores when allocating memory.
    - VMM: fixed demang paging + SMP bug, general cleanup of vm driver interface.
        - Added 'zero paging': when demang paging a readonly page of all zeroes is mapped instead of nothing. This should help cause a few less page faults, and later on.
        - Added VFS driver: we can now memory map files, including expanding them. Private mappings aren't supported just yet, but there have been provisions made. The VFS VM driver also makes use of demand paging where appropriate.
        - Switched to a red-black tree for managing vm ranges (instead of a singly linked list). Managing free address space is also done with another rbtree instead of inferring which regions were in-use. This is a little easier to reason about at the cost of more runtime memory.
        - Now tracks basic statistics about the working and resident set sizes.

- Added development cache (develcache): limine and any OVMF firmware files for testing are downloaded and cached inside the project directly, reducing setup for getting started with the project.
    - This is opt-out, and you can point the build system to your own limine and OVMF firmware files if you prefer that.

- Added stats display to graphical terminals, inspired by it's use in Keyronex.

- Kernel/drivers: module loader and external drivers now fully suppoported.
    - Module loader supports ELF shared objects, rather than the conventional relocatable objects.
    - Proof of concept driver written. Previously implemented drivers will be ported at some point to use the new system.
- Kernel: rewrite of symbol lookup. Before symbols used to be generated after the kernel was linked, compiling the symbols into an ELF object and sticking that object at the end of the kernel file (so as not to shuffle existing symbol addresses around). This certainly worked, but it's not as clean as the newer version: which just parses the kernel file request from the bootloader.
- Kernel/riscv: now uses `tp` for core-local info instead of reading `sscratch` everytime. Thanks to xvanc and sigterm for the feedback.
- Kernel/riscv: support for acpi based initialization, in addition to the device tree.
- Kernel: added concept of system topology, currently logical and physical cores are tracked, are as NUMA domains and their corresponding physical cores and memory.
- Moved to internal stdint.h/stddef.h headers, meaning no external headers are required for building. This removes the need for management external sysroots and platform-specific headers.

# v0.1.0
- Initial release using git tags.
- Added new kernel features:
    - VFS, follows a traditional unix design.
    - File cache, caches chunks of file contents in memory.
    - TempFS driver, operates like any other filesystem just with no backing storage.
- Releases include a bootable x86_64 iso for use with your emulator of choice now.
    - A risc-v version will follow soon.
